# Extract posterior draws for the fixed effects
# For our binary model, the coefficients are on the logit scale.
posterior_fixed <- as.matrix(mdl_H3_binary, variable = c("b_Intercept", "b_exp_part1"))
# Plot using mcmc_intervals; we add a dashed vertical line at 0 for reference.
mcmc_intervals(posterior_fixed, prob = 0.95, prob_outer = 0.99) +
geom_vline(xintercept = 0, linetype = "dashed") +
labs(
x = "Coefficient (logit scale)"
) +
theme_minimal(base_size = 18)
gather_draws(mdl_H3_binary, `b_.*`, regex = TRUE) %>%
# remove the b_ for plotting
#mutate(.variable = gsub("b_","", .variable)) %>%
ggplot(aes(x = .value, y = .variable, fill = after_stat(x < 0))) +
geom_vline(xintercept=0.0, linetype="dotted", color="gray30") +
stat_halfeye(alpha=0.75, point_interval=median_qi, .width=c(.50, .95)) +
scale_fill_manual(values = c("lightsalmon", "skyblue"), name=NULL, labels=c("≥ 0", "< 0")) +
#xlim(-10, 10) +
scale_y_discrete(labels=c("b_Intercept" = "Intercept α",
"b_exp_part1" = "experiment part 1")) +
ylab(NULL) + xlab("Estimate") +
theme(axis.title.x = element_text(margin = margin(t = 12, b = 0,
r = 0, l = 0),
face = 'bold', size = 14),
axis.text.x = element_text(face = 'bold', size = 12),
axis.text.y = element_text(face = 'bold', size = 12))+
NULL;
gather_draws(mdl_H3_similarity, `b_.*`, regex = TRUE) %>%
# remove the b_ for plotting
filter(.variable == c("b_Intercept", "b_exp_part1")) %>%
ggplot(aes(x = .value, y = .variable, fill = after_stat(x < 0))) +
geom_vline(xintercept=0.0, linetype="dotted", color="gray30") +
stat_halfeye(alpha=0.75, point_interval=median_qi, .width=c(.50, .95)) +
scale_fill_manual(values = c("lightsalmon", "skyblue"), name=NULL, labels=c("≥ 0", "< 0")) +
#xlim(-10, 10) +
scale_y_discrete(labels=c("b_Intercept" = "Intercept α",
"b_exp_part1" = "Experiment part")) +
ylab(NULL) + xlab("Estimate") +
theme(axis.title.x = element_text(margin = margin(t = 12, b = 0,
r = 0, l = 0),
face = 'bold', size = 14),
axis.text.x = element_text(face = 'bold', size = 12),
axis.text.y = element_text(face = 'bold', size = 12))+
NULL;
gather_draws(mdl_H3_binary, `b_.*`, regex = TRUE) %>%
# remove the b_ for plotting
#mutate(.variable = gsub("b_","", .variable)) %>%
ggplot(aes(x = .value, y = .variable, fill = after_stat(x < 0))) +
geom_vline(xintercept=0.0, linetype="dotted", color="gray30") +
stat_halfeye(alpha=0.75, point_interval=median_qi, .width=c(.50, .95)) +
scale_fill_manual(values = c("lightsalmon", "skyblue"), name=NULL, labels=c("≥ 0", "< 0")) +
#xlim(-10, 10) +
scale_y_discrete(labels=c("b_Intercept" = "Intercept α",
"b_exp_part1" = "experiment part 1")) +
ylab(NULL) + xlab("Estimate") +
theme(axis.title.x = element_text(margin = margin(t = 12, b = 0,
r = 0, l = 0),
face = 'bold', size = 14),
axis.text.x = element_text(face = 'bold', size = 12),
axis.text.y = element_text(face = 'bold', size = 12))+
NULL;
h3_bin <- gather_draws(mdl_H3_binary, `b_.*`, regex = TRUE) %>%
# remove the b_ for plotting
#mutate(.variable = gsub("b_","", .variable)) %>%
ggplot(aes(x = .value, y = .variable, fill = after_stat(x < 0))) +
geom_vline(xintercept=0.0, linetype="dotted", color="gray30") +
stat_halfeye(alpha=0.75, point_interval=median_qi, .width=c(.50, .95)) +
scale_fill_manual(values = c("lightsalmon", "skyblue"), name=NULL, labels=c("≥ 0", "< 0")) +
#xlim(-10, 10) +
scale_y_discrete(labels=c("b_Intercept" = "Intercept α",
"b_exp_part1" = "experiment part 1")) +
ylab(NULL) + xlab("Estimate") +
theme(axis.title.x = element_text(margin = margin(t = 12, b = 0,
r = 0, l = 0),
face = 'bold', size = 14),
axis.text.x = element_text(face = 'bold', size = 12),
axis.text.y = element_text(face = 'bold', size = 12))+
NULL;
h3_bin
h3_sim <- gather_draws(mdl_H3_similarity, `b_.*`, regex = TRUE) %>%
# remove the b_ for plotting
filter(.variable == c("b_Intercept", "b_exp_part1")) %>%
ggplot(aes(x = .value, y = .variable, fill = after_stat(x < 0))) +
geom_vline(xintercept=0.0, linetype="dotted", color="gray30") +
stat_halfeye(alpha=0.75, point_interval=median_qi, .width=c(.50, .95)) +
scale_fill_manual(values = c("lightsalmon", "skyblue"), name=NULL, labels=c("≥ 0", "< 0")) +
#xlim(-10, 10) +
scale_y_discrete(labels=c("b_Intercept" = "Intercept α",
"b_exp_part1" = "experiment part 1")) +
ylab(NULL) + xlab("Estimate (cosine similarity)") +
theme(axis.title.x = element_text(margin = margin(t = 12, b = 0,
r = 0, l = 0),
face = 'bold', size = 14),
axis.text.x = element_text(face = 'bold', size = 12),
axis.text.y = element_text(face = 'bold', size = 12))+
NULL;
h3_sim
h3_sim <- gather_draws(mdl_H3_similarity, `b_.*`, regex = TRUE) %>%
# remove the b_ for plotting
filter(.variable == c("b_Intercept", "b_exp_part1")) %>%
ggplot(aes(x = .value, y = .variable, fill = after_stat(x < 0))) +
geom_vline(xintercept=0.0, linetype="dotted", color="gray30") +
stat_halfeye(alpha=0.75, point_interval=median_qi, .width=c(.50, .95)) +
scale_fill_manual(values = c("lightsalmon", "skyblue"), name=NULL, labels=c("≥ 0", "< 0")) +
#xlim(-10, 10) +
scale_y_discrete(labels=c("b_Intercept" = "Intercept α",
"b_exp_part1" = "Experiment part 1")) +
ylab(NULL) + xlab("Estimate (cosine similarity)") +
theme(axis.title.x = element_text(margin = margin(t = 12, b = 0,
r = 0, l = 0),
face = 'bold', size = 14),
axis.text.x = element_text(face = 'bold', size = 12),
axis.text.y = element_text(face = 'bold', size = 12))+
NULL;
h3_sim
h3_bin <- gather_draws(mdl_H3_binary, `b_.*`, regex = TRUE) %>%
# remove the b_ for plotting
#mutate(.variable = gsub("b_","", .variable)) %>%
ggplot(aes(x = .value, y = .variable, fill = after_stat(x < 0))) +
geom_vline(xintercept=0.0, linetype="dotted", color="gray30") +
stat_halfeye(alpha=0.75, point_interval=median_qi, .width=c(.50, .95)) +
scale_fill_manual(values = c("lightsalmon", "skyblue"), name=NULL, labels=c("≥ 0", "< 0")) +
#xlim(-10, 10) +
scale_y_discrete(labels=c("b_Intercept" = "Intercept α",
"b_exp_part1" = "Experiment part 1")) +
ylab(NULL) + xlab("Estimate (guess binary)") +
theme(axis.title.x = element_text(margin = margin(t = 12, b = 0,
r = 0, l = 0),
face = 'bold', size = 14),
axis.text.x = element_text(face = 'bold', size = 12),
axis.text.y = element_text(face = 'bold', size = 12))+
NULL;
h3_bin
# Arrange the two panels vertically using grid.arrange
grid.arrange(h3_bin, h3_sim, ncol = 2)
# Arrange the two panels vertically using grid.arrange
grid.arrange(h3_bin + guides(fill="none"), h3_sim, ncol = 2)
# Arrange the two panels vertically using grid.arrange
grid.arrange(h3_bin + guides(fill="none"), h3_sim + axis.text.y=element_blank(), ncol = 2)
# Arrange the two panels vertically using grid.arrange
grid.arrange(h3_bin + guides(fill="none"), h3_sim + theme(axis.text.y=element_blank()), ncol = 2)
h3_sim <- gather_draws(mdl_H3_similarity, `b_.*`, regex = TRUE) %>%
# remove the b_ for plotting
filter(.variable == c("b_Intercept", "b_exp_part1")) %>%
ggplot(aes(x = .value, y = .variable, fill = after_stat(x < 0))) +
geom_vline(xintercept=0.0, linetype="dotted", color="gray30") +
stat_halfeye(alpha=0.75, point_interval=median_qi, .width=c(.50, .95)) +
scale_fill_manual(values = c("lightsalmon", "skyblue"), name=NULL, labels=c("≥ 0", "< 0")) +
#xlim(-10, 10) +
scale_y_discrete(labels=c("b_Intercept" = "Intercept α",
"b_exp_part1" = "Experiment part 1")) +
ylab(NULL) + xlab("Estimate\n(cosine similarity)") +
theme(axis.title.x = element_text(margin = margin(t = 12, b = 0,
r = 0, l = 0),
face = 'bold', size = 14),
axis.text.x = element_text(face = 'bold', size = 12),
axis.text.y = element_text(face = 'bold', size = 12))+
NULL;
h3_sim
# Arrange the two panels vertically using grid.arrange
grid.arrange(h3_bin + guides(fill="none"), h3_sim + theme(axis.text.y=element_blank()), ncol = 2)
h3_bin <- gather_draws(mdl_H3_binary, `b_.*`, regex = TRUE) %>%
# remove the b_ for plotting
#mutate(.variable = gsub("b_","", .variable)) %>%
ggplot(aes(x = .value, y = .variable, fill = after_stat(x < 0))) +
geom_vline(xintercept=0.0, linetype="dotted", color="gray30") +
stat_halfeye(alpha=0.75, point_interval=median_qi, .width=c(.50, .95)) +
scale_fill_manual(values = c("lightsalmon", "skyblue"), name=NULL, labels=c("≥ 0", "< 0")) +
#xlim(-10, 10) +
scale_y_discrete(labels=c("b_Intercept" = "Intercept α",
"b_exp_part1" = "Experiment part 1")) +
ylab(NULL) + xlab("Estimate\n(guess binary)") +
theme(axis.title.x = element_text(margin = margin(t = 12, b = 0,
r = 0, l = 0),
face = 'bold', size = 14),
axis.text.x = element_text(face = 'bold', size = 12),
axis.text.y = element_text(face = 'bold', size = 12))+
NULL;
h3_bin
# Arrange the two panels vertically using grid.arrange
grid.arrange(h3_bin + guides(fill="none"), h3_sim + theme(axis.text.y=element_blank()), ncol = 2)
#save
g <- arrangeGrob(h3_bin + guides(fill="none"), h3_sim + theme(axis.text.y=element_blank()), ncol = 2)
ggsave(paste0(plots, "H3_models.png"), plot = g, width = 8, height = 5, dpi = 300)
h3_bin <- gather_draws(mdl_H3_binary, `b_.*`, regex = TRUE) %>%
# remove the b_ for plotting
#mutate(.variable = gsub("b_","", .variable)) %>%
ggplot(aes(x = .value, y = .variable, fill = after_stat(x < 0))) +
geom_vline(xintercept=0.0, linetype="dotted", color="gray30") +
stat_halfeye(alpha=0.75, point_interval=median_qi, .width=c(.50, .95)) +
scale_fill_manual(values = c("lightsalmon", "skyblue"), name=NULL, labels=c("≥ 0", "< 0")) +
#xlim(-10, 10) +
scale_y_discrete(labels=c("b_Intercept" = "Intercept α",
"b_exp_part1" = "Experiment part")) +
ylab(NULL) + xlab("Estimate\n(guess binary)") +
theme(axis.title.x = element_text(margin = margin(t = 12, b = 0,
r = 0, l = 0),
face = 'bold', size = 14),
axis.text.x = element_text(face = 'bold', size = 12),
axis.text.y = element_text(face = 'bold', size = 12))+
NULL;
h3_bin
# Panel 1: Averaged cosine similarity x expressibility
p_obs <- df %>%
filter(!is.na(cosine_similarity)) %>%
ggplot(aes(y = cosine_similarity, fill = factor(exp_part))) +
geom_boxplot(alpha = 0.5) +
scale_fill_manual(values = c("1" = colorBlindBlack8[1], "2" = colorBlindBlack8[2]),
labels = c("2", "1")) +
labs(y = "Cosine similarity", y = "Experiment part", fill = "Experiment part") +
theme_minimal(base_size = 18)
h3_sim <- gather_draws(mdl_H3_similarity, `b_.*`, regex = TRUE) %>%
# remove the b_ for plotting
filter(.variable == c("b_Intercept", "b_exp_part1")) %>%
ggplot(aes(x = .value, y = .variable, fill = after_stat(x < 0))) +
geom_vline(xintercept=0.0, linetype="dotted", color="gray30") +
stat_halfeye(alpha=0.75, point_interval=median_qi, .width=c(.50, .95)) +
scale_fill_manual(values = c("lightsalmon", "skyblue"), name=NULL, labels=c("≥ 0", "< 0")) +
#xlim(-10, 10) +
scale_y_discrete(labels=c("b_Intercept" = "Intercept α",
"b_exp_part1" = "Experiment part")) +
ylab(NULL) + xlab("Estimate\n(cosine similarity)") +
theme(axis.title.x = element_text(margin = margin(t = 12, b = 0,
r = 0, l = 0),
face = 'bold', size = 14),
axis.text.x = element_text(face = 'bold', size = 12),
axis.text.y = element_text(face = 'bold', size = 12))+
NULL;
h3_sim
# Arrange the two panels vertically using grid.arrange
grid.arrange(h3_bin + guides(fill="none"), h3_sim + theme(axis.text.y=element_blank()), ncol = 2)
#save
g <- arrangeGrob(h3_bin + guides(fill="none"), h3_sim + theme(axis.text.y=element_blank()), ncol = 2)
ggsave(paste0(plots, "H3_models.png"), plot = g, width = 8, height = 5, dpi = 300)
ggsave(paste0(plots, "H3_models.png"), plot = g, width = 8, height = 5, dpi = 300)
# Panel 1: Observed distribution of modality by guess outcome
p_obs <- df %>%
filter(!is.na(guess_binary)) %>%
ggplot(aes(x = modality, fill = factor(guess_binary))) +
geom_boxplot(alpha = 0.5) +
scale_fill_manual(values = c("0" = colorBlindBlack8[1], "1" = colorBlindBlack8[2]),
labels = c("incorrect", "correct")) +
labs(x = "Expressibility", y = "Density", fill = "Guess") +
theme_minimal(base_size = 18)
# Panel 2: Conditional effects of exp_part on predicted probability
ce_exp <- conditional_effects(mdl_H4_binary, effects = "modality")
p_pred <- plot(ce_exp, plot = FALSE)[[1]] +
labs(x = "Expressibility", y = "Predicted probability\nof correct guess") +
theme_minimal(base_size = 18)
# Arrange the two panels vertically using grid.arrange
grid.arrange(p_obs, p_pred, ncol = 1)
ggplot(df, aes(x = modality, y = guess_binary, fill = modality)) +
stat_summary(fun = "mean", geom = "bar", color = "black", alpha = 0.7) +  # Calculate mean for guess_binary (performance)
stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.2) +  # Add error bars (95% CI)
labs(
x = "Modality",
y = "Guessability",
) +
scale_fill_manual(values = c("combined" = colorBlindBlack8[1], "gesture" = colorBlindBlack8[2], "vocal" = colorBlindBlack8[3])) +  # Customize colors
guides(fill = "none") +  # Remove the fill legend
scale_y_continuous(breaks = seq(0, 1, by = 0.05),
limits = c(0,1)) +
theme_minimal() +
theme(
text = element_text(size = 14),  # Increase text size for readability
axis.title.x = element_text(vjust = -0.5),  # Adjust x-axis title position
axis.title.y = element_text(vjust = 1.5)   # Adjust y-axis title position
)
# Panel 1: Observed distribution of modality by guess outcome
p_obs <- ggplot(df, aes(x = modality, y = guess_binary, fill = modality)) +
stat_summary(fun = "mean", geom = "bar", color = "black", alpha = 0.7) +  # Calculate mean for guess_binary (performance)
stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.2) +  # Add error bars (95% CI)
labs(
x = "Modality",
y = "Guessability",
) +
scale_fill_manual(values = c("combined" = colorBlindBlack8[1], "gesture" = colorBlindBlack8[2], "vocal" = colorBlindBlack8[3])) +  # Customize colors
guides(fill = "none") +  # Remove the fill legend
scale_y_continuous(breaks = seq(0, 1, by = 0.05),
limits = c(0,1)) +
theme_minimal() +
theme(
text = element_text(size = 14),  # Increase text size for readability
axis.title.x = element_text(vjust = -0.5),  # Adjust x-axis title position
axis.title.y = element_text(vjust = 1.5)   # Adjust y-axis title position
)
# Panel 2: Conditional effects of exp_part on predicted probability
ce_exp <- conditional_effects(mdl_H4_binary, effects = "modality")
p_pred <- plot(ce_exp, plot = FALSE)[[1]] +
labs(x = "Expressibility", y = "Predicted probability\nof correct guess") +
theme_minimal(base_size = 18)
# Arrange the two panels vertically using grid.arrange
grid.arrange(p_obs, p_pred, ncol = 1)
# Panel 1: Observed distribution of modality by guess outcome
p_obs <- ggplot(df, aes(x = modality, y = guess_binary, fill = modality)) +
stat_summary(fun = "mean", geom = "bar", color = "black", alpha = 0.7) +  # Calculate mean for guess_binary (performance)
stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.2) +  # Add error bars (95% CI)
labs(
x = "Modality",
y = "Guessability",
) +
scale_fill_manual(values = c("combined" = colorBlindBlack8[1], "gesture" = colorBlindBlack8[2], "vocal" = colorBlindBlack8[3])) +  # Customize colors
guides(fill = "none") +  # Remove the fill legend
# scale_y_continuous(breaks = seq(0, 1, by = 0.05),
#                    limits = c(0,1)) +
theme_minimal() +
theme(
text = element_text(size = 14),  # Increase text size for readability
axis.title.x = element_text(vjust = -0.5),  # Adjust x-axis title position
axis.title.y = element_text(vjust = 1.5)   # Adjust y-axis title position
)
# Panel 2: Conditional effects of exp_part on predicted probability
ce_exp <- conditional_effects(mdl_H4_binary, effects = "modality")
p_pred <- plot(ce_exp, plot = FALSE)[[1]] +
labs(x = "Expressibility", y = "Predicted probability\nof correct guess") +
theme_minimal(base_size = 18)
# Panel 1: Observed distribution of modality by guess outcome
p_obs <- ggplot(df, aes(x = modality, y = guess_binary, fill = modality)) +
stat_summary(fun = "mean", geom = "bar", color = "black", alpha = 0.7) +  # Calculate mean for guess_binary (performance)
stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.2) +  # Add error bars (95% CI)
labs(
x = "Modality",
y = "Guessability",
) +
scale_fill_manual(values = c("combined" = colorBlindBlack8[1], "gesture" = colorBlindBlack8[2], "vocal" = colorBlindBlack8[3])) +  # Customize colors
guides(fill = "none") +  # Remove the fill legend
# scale_y_continuous(breaks = seq(0, 1, by = 0.05),
#                    limits = c(0,1)) +
theme_minimal() +
theme(
text = element_text(size = 14),  # Increase text size for readability
axis.title.x = element_text(vjust = -0.5),  # Adjust x-axis title position
axis.title.y = element_text(vjust = 1.5)   # Adjust y-axis title position
)
p_obs
# Panel 2: Conditional effects of exp_part on predicted probability
ce_exp <- conditional_effects(mdl_H4_binary, effects = "modality")
p_pred <- plot(ce_exp, plot = FALSE)[[1]] +
labs(x = "Expressibility", y = "Predicted probability\nof correct guess") +
theme_minimal(base_size = 18)
# Arrange the two panels vertically using grid.arrange
grid.arrange(p_obs, p_pred, ncol = 1)
# Panel 1: Observed distribution of modality by guess outcome
p_obs <- ggplot(df, aes(x = modality, y = guess_binary, fill = modality)) +
stat_summary(fun = "mean", geom = "bar", color = "black", alpha = 0.7) +  # Calculate mean for guess_binary (performance)
stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.2) +  # Add error bars (95% CI)
labs(
x = "Modality",
y = "Mean binaryguessability",
) +
scale_fill_manual(values = c("combined" = colorBlindBlack8[1], "gesture" = colorBlindBlack8[2], "vocal" = colorBlindBlack8[3])) +  # Customize colors
guides(fill = "none") +  # Remove the fill legend
# scale_y_continuous(breaks = seq(0, 1, by = 0.05),
#                    limits = c(0,1)) +
theme_minimal() +
theme(
text = element_text(size = 14),  # Increase text size for readability
axis.title.x = element_text(vjust = -0.5),  # Adjust x-axis title position
axis.title.y = element_text(vjust = 1.5)   # Adjust y-axis title position
)
# Panel 1: Observed distribution of modality by guess outcome
p_obs <- ggplot(df, aes(x = modality, y = guess_binary, fill = modality)) +
stat_summary(fun = "mean", geom = "bar", color = "black", alpha = 0.7) +  # Calculate mean for guess_binary (performance)
stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.2) +  # Add error bars (95% CI)
labs(
x = "Modality",
y = "Mean binary guessability",
) +
scale_fill_manual(values = c("combined" = colorBlindBlack8[1], "gesture" = colorBlindBlack8[2], "vocal" = colorBlindBlack8[3])) +  # Customize colors
guides(fill = "none") +  # Remove the fill legend
# scale_y_continuous(breaks = seq(0, 1, by = 0.05),
#                    limits = c(0,1)) +
theme_minimal() +
theme(
text = element_text(size = 14),  # Increase text size for readability
axis.title.x = element_text(vjust = -0.5),  # Adjust x-axis title position
axis.title.y = element_text(vjust = 1.5)   # Adjust y-axis title position
)
# Panel 2: Conditional effects of exp_part on predicted probability
ce_exp <- conditional_effects(mdl_H4_binary, effects = "modality")
p_pred <- plot(ce_exp, plot = FALSE)[[1]] +
labs(x = "Expressibility", y = "Predicted probability\nof correct guess") +
theme_minimal(base_size = 18)
# Arrange the two panels vertically using grid.arrange
grid.arrange(p_obs, p_pred, ncol = 1)
ggplot(df, aes(x = modality, y = cosine_similarity, fill = modality)) +
stat_summary(fun = "mean", geom = "bar", color = "black", alpha = 0.7) +  # Calculate mean
stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.2) +  # Add error bars (95% CI)
labs(
x = "Modality",
y = "Cosine similarity",
) +
scale_fill_manual(values = c("combined" = colorBlindBlack8[1], "gesture" = colorBlindBlack8[2], "vocal" = colorBlindBlack8[3])) +  # Customize colors
guides(fill = "none") +  # Remove the fill legend
scale_y_continuous(breaks = seq(0, 1, by = 0.05),
limits = c(0,1)) +
theme_minimal()  +
theme(
text = element_text(size = 14),  # Increase text size for readability
axis.title.x = element_text(vjust = -0.5),  # Adjust x-axis title position
axis.title.y = element_text(vjust = 1.5)   # Adjust y-axis title position
)
# Arrange the two panels vertically using grid.arrange
grid.arrange(p_obs, p_pred, ncol = 1)
# Panel 1: Observed distribution of modality by guess outcome
p_obs <- ggplot(df, aes(x = modality, y = guess_binary, fill = modality)) +
stat_summary(fun = "mean", geom = "bar", color = "black", alpha = 0.7) +  # Calculate mean for guess_binary (performance)
stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.2) +  # Add error bars (95% CI)
labs(
x = "Modality",
y = "Mean binary guessability",
) +
scale_fill_manual(values = c("combined" = colorBlindBlack8[1], "gesture" = colorBlindBlack8[2], "vocal" = colorBlindBlack8[3])) +  # Customize colors
guides(fill = "none") +  # Remove the fill legend
# scale_y_continuous(breaks = seq(0, 1, by = 0.05),
#                    limits = c(0,1)) +
theme_minimal() +
theme(
text = element_text(size = 14),  # Increase text size for readability
axis.title.x = element_text(vjust = -0.5),  # Adjust x-axis title position
axis.title.y = element_text(vjust = 1.5)   # Adjust y-axis title position
)
# Panel 2: Conditional effects of exp_part on predicted probability
ce_exp <- conditional_effects(mdl_H4_binary, effects = "modality")
p_pred <- plot(ce_exp, plot = FALSE)[[1]] +
labs(x = "Modality", y = "Predicted probability\nof correct guess") +
theme_minimal(base_size = 18)
# Arrange the two panels vertically using grid.arrange
grid.arrange(p_obs, p_pred, ncol = 1)
# Panel 1: Observed distribution of modality by guess outcome
p_obs <- ggplot(df, aes(x = modality, y = guess_binary, fill = modality)) +
stat_summary(fun = "mean", geom = "bar", color = "black", alpha = 0.7) +  # Calculate mean for guess_binary (performance)
stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.2) +  # Add error bars (95% CI)
labs(
x = "Modality",
y = "Mean binary guessability",
) +
scale_fill_manual(values = c("combined" = colorBlindBlack8[1], "gesture" = colorBlindBlack8[2], "vocal" = colorBlindBlack8[3])) +  # Customize colors
guides(fill = "none") +  # Remove the fill legend
# scale_y_continuous(breaks = seq(0, 1, by = 0.05),
#                    limits = c(0,1)) +
theme_minimal(base_size = 18) +
theme(
#text = element_text(size = 14),  # Increase text size for readability
axis.title.x = element_text(vjust = -0.5),  # Adjust x-axis title position
axis.title.y = element_blank()
)
# Panel 2: Conditional effects of exp_part on predicted probability
ce_exp <- conditional_effects(mdl_H4_binary, effects = "modality")
p_pred <- plot(ce_exp, plot = FALSE)[[1]] +
labs(x = "Modality", y = "Predicted probability\nof correct guess") +
theme_minimal(base_size = 18)
# Arrange the two panels vertically using grid.arrange
grid.arrange(p_obs, p_pred, ncol = 1)
# Panel 1: Observed distribution of modality by guess outcome
p_obs <- ggplot(df, aes(x = modality, y = guess_binary, fill = modality)) +
stat_summary(fun = "mean", geom = "bar", color = "black", alpha = 0.7) +  # Calculate mean for guess_binary (performance)
stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.2) +  # Add error bars (95% CI)
labs(
x = "Modality",
y = "Mean binary guessability",
) +
scale_fill_manual(values = c("combined" = colorBlindBlack8[1], "gesture" = colorBlindBlack8[2], "vocal" = colorBlindBlack8[3])) +  # Customize colors
guides(fill = "none") +  # Remove the fill legend
# scale_y_continuous(breaks = seq(0, 1, by = 0.05),
#                    limits = c(0,1)) +
theme_minimal(base_size = 18) +
theme(
#text = element_text(size = 14),  # Increase text size for readability
axis.title.x = element_blank(),
axis.title.y = element_text(vjust = 1.5)   # Adjust y-axis title position
)
# Panel 2: Conditional effects of exp_part on predicted probability
ce_exp <- conditional_effects(mdl_H4_binary, effects = "modality")
p_pred <- plot(ce_exp, plot = FALSE)[[1]] +
labs(x = "Modality", y = "Predicted probability\nof correct guess") +
theme_minimal(base_size = 18)
# Arrange the two panels vertically using grid.arrange
grid.arrange(p_obs, p_pred, ncol = 1)
# Panel 1: Observed distribution of modality by guess outcome
p_obs <- ggplot(df, aes(x = modality, y = guess_binary, fill = modality)) +
stat_summary(fun = "mean", geom = "bar", color = "black", alpha = 0.7) +  # Calculate mean for guess_binary (performance)
stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width = 0.2) +  # Add error bars (95% CI)
labs(
x = "Modality",
y = "Mean binary guessability",
) +
scale_fill_manual(values = c("combined" = colorBlindBlack8[1], "gesture" = colorBlindBlack8[2], "vocal" = colorBlindBlack8[3])) +  # Customize colors
guides(fill = "none") +  # Remove the fill legend
# scale_y_continuous(breaks = seq(0, 1, by = 0.05),
#                    limits = c(0,1)) +
theme_minimal(base_size = 18) +
theme(
#text = element_text(size = 14),  # Increase text size for readability
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_text(vjust = 1.5)   # Adjust y-axis title position
)
# Panel 2: Conditional effects of exp_part on predicted probability
ce_exp <- conditional_effects(mdl_H4_binary, effects = "modality")
p_pred <- plot(ce_exp, plot = FALSE)[[1]] +
labs(x = "Modality", y = "Predicted probability\nof correct guess") +
theme_minimal(base_size = 18)
# Arrange the two panels vertically using grid.arrange
grid.arrange(p_obs, p_pred, ncol = 1)
#save
g <- arrangeGrob(p_obs, p_pred, ncol = 1)
ggsave(paste0(plots, "H4_binaryModel.png"), plot = g, width = 8, height = 5, dpi = 300)
ggsave(paste0(plots, "H4_binaryModel.png"), plot = g, width = 8, height = 8, dpi = 300)
sprintf("%.0f", exp(fixef(mdl_H1_similarity)["expressibility_dutch", "Estimate"]))
sprintf("%.2f 95%%CI [%.2f, %.2f]", fixef(mdl_H1_similarity)["expressibility_dutch", "Estimate"], bayestestR::ci(mdl_H1_similarity, ci = 0.95, method = "ETI")[2, "CI_low"], bayestestR::ci(mdl_H1_similarity, ci = 0.95, method = "ETI")[2, "CI_high"])`
sprintf("%.2f 95%%CI [%.2f, %.2f]", fixef(mdl_H1_similarity)["expressibility_dutch", "Estimate"], bayestestR::ci(mdl_H1_similarity, ci = 0.95, method = "ETI")[2, "CI_low"], bayestestR::ci(mdl_H1_similarity, ci = 0.95, method = "ETI")[2, "CI_high"])
